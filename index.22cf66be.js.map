{"mappings":"AAAA,MAAMA,EAAiBC,MAAMC,IAC3B,MAAMC,EAAM,qCAAqCD,mDACjD,IACE,MAAME,QAAiBC,MAAMF,GAC7B,IAAKC,EAASE,GACZ,OAAOC,QAAQC,OAAO,IAAIC,MAAML,EAASM,SAG3C,aADmBN,EAASO,M,CAE5B,MAAOC,GAEP,OADAC,QAAQD,MAAMA,GACPL,QAAQC,OACb,IAAIC,MAAM,8C,GCNVK,EAAcC,SAASC,eAAe,cACtCC,EAAcF,SAASG,cAAc,iBACrCC,EAAcJ,SAASG,cAAc,iBAE1CD,EAAWG,iBAAiB,SAASC,IACpC,MACMC,EADiBD,EAAME,OACGC,QAAQ,MACxC,GAAIF,EAAU,CACZ,MAAMG,EAAkBH,EAASI,GACjC1B,EAAeyB,GAAiBE,MAAKC,IACnCC,EAAWD,EAAK,G,KAKtB,MAAME,EAAeC,UAAS,KAC5B,MAAMC,EAAalB,EAAYmB,MAAMC,OACjCF,EACFhC,EAAegC,GAAYL,MAAKC,IAC9BC,EAAWD,GACPA,EAAKO,OAAS,GAChBC,SAASC,OAAOC,KACd,8DAEOV,EAAKO,QAAU,GAAKP,EAAKO,QAAU,GAC5CC,SAASC,OAAOE,QAAQ,GAAGX,EAAKO,2BACP,IAAhBP,EAAKO,OACdC,SAASC,OAAOE,QAAQ,sBAExBH,SAASC,OAAOG,QAAQ,4CAA4C,IAIxEvB,EAAYwB,UAAY,EAAE,GAnCP,KAuCjBC,EAAsBC,IAC1B,MA4BMC,EA5BS,CACbC,GAAI,CACFC,QAAS,OACT,iBAAkB,SAClBC,IAAK,OACLC,QAAS,GAEXC,GAAI,CACF,aAAc,OACdH,QAAS,cACTC,IAAK,OACLG,OAAQ,WAEVC,IAAK,CACHC,MAAO,QAETC,EAAG,CACDC,OAAQ,GAEVC,GAAI,CACF,YAAa,OACb,cAAe,OACfD,OAAQ,GAEVE,KAAM,CACJ,cAAe,SAGWb,GAC9B,OAAOc,OAAOC,QAAQd,GACnBe,KAAI,EAAEC,EAAU3B,KAAW,GAAG2B,KAAY3B,MAC1C4B,KAAK,IAAI,EAGRhC,EAAaD,IACjB,MAAMkC,EAASlC,EACZ+B,KACC,EAAGzD,MAAM6D,OAAEA,GAAQC,MAAEA,KAAY,qBACrBD,aAAkBrB,EAAoB,gCAE5CsB,EAAM,YACED,kBAAuBrB,EAAoB,iCACzCA,EAAoB,SAASqB,iCAI9CF,KAAK,IAMR,GAJA5C,EAAYwB,UAAYqB,EACxB7C,EAAYgD,MAAMC,QAAUxB,EAAoB,MAChDvB,EAAYsB,UAAY,GAEJ,IAAhBb,EAAKO,OAAc,CACrB,MAAMjC,KAAEA,EAAIiE,QAAEA,EAAOC,WAAEA,EAAUC,UAAEA,EAASL,MAAEA,GAAUpC,EAAK,GAC7DX,EAAYwB,UAAY,GACxBtB,EAAYsB,UAAY,wBACPC,EAAoB,iCAClBA,EAAoB,kCACnBsB,EAAM,YACxB9D,EAAK6D,uBACUrB,EAAoB,oCAChBA,EAAoB,UAAUxC,EAAK6D,sDAErCrB,EAAoB,qCAChBA,EAAoB,mDACvBA,EAAoB,SAASyB,EAAQ,IAAM,kDAE5CzB,EAAoB,qCAChBA,EAAoB,sDACvBA,EAAoB,SAAS0B,gDAE9B1B,EAAoB,qCAChBA,EAAoB,qDACvBA,EAAoB,SAASe,OAAOa,OACtDD,GACAR,KAAK,yB,GAKX/C,EAAYM,iBAAiB,QAASU","sources":["src/fetchCountries.js","src/index.js"],"sourcesContent":["const fetchCountries = async name => {\n  const url = `https://restcountries.com/v3/name/${name}?fields=name,capital,population,flags,languages`;\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      return Promise.reject(new Error(response.status));\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(error);\n    return Promise.reject(\n      new Error('An error occurred while fetching the data.')\n    );\n  }\n};\n\nexport { fetchCountries };\n","import './css/styles.css';\nimport { fetchCountries } from './fetchCountries.js';\n//import { debounce } from 'lodash';\n//import Notiflix from 'notiflix';\nconst DEBOUNCE_DELAY = 300;\n\nconst searchInput = document.getElementById('search-box');\nconst countryList = document.querySelector('.country-list');\nconst countryInfo = document.querySelector('.country-info');\n// obsługa klikniecia w kraj\ncountryList.addEventListener('click', event => {\n  const clickedElement = event.target;\n  const listItem = clickedElement.closest('li');\n  if (listItem) {\n    const selectedCountry = listItem.id;\n    fetchCountries(selectedCountry).then(data => {\n      renderList(data);\n    });\n  }\n});\n// pobieranie i render krajow\nconst handleSearch = debounce(() => {\n  const searchTerm = searchInput.value.trim();\n  if (searchTerm) {\n    fetchCountries(searchTerm).then(data => {\n      renderList(data);\n      if (data.length > 10) {\n        Notiflix.Notify.info(\n          'Too many matches found. Please enter a more specific name.'\n        );\n      } else if (data.length >= 2 && data.length <= 10) {\n        Notiflix.Notify.success(`${data.length} countries found.`);\n      } else if (data.length === 1) {\n        Notiflix.Notify.success('One country found.');\n      } else {\n        Notiflix.Notify.failure('Oops, there is no country with that name.');\n      }\n    });\n  } else {\n    countryList.innerHTML = '';\n  }\n}, DEBOUNCE_DELAY);\n//generowanie styli\nconst generateStyleString = styleKey => {\n  const styles = {\n    ul: {\n      display: 'flex',\n      'flex-direction': 'column',\n      gap: '10px',\n      padding: 0,\n    },\n    li: {\n      'list-style': 'none',\n      display: 'inline-flex',\n      gap: '10px',\n      cursor: 'pointer',\n    },\n    img: {\n      width: '40px',\n    },\n    p: {\n      margin: 0,\n    },\n    h4: {\n      'font-size': '30px',\n      'font-weight': 'bold',\n      margin: 0,\n    },\n    span: {\n      'font-weight': 'bold',\n    },\n  };\n  const selectedStyles = styles[styleKey];\n  return Object.entries(selectedStyles)\n    .map(([property, value]) => `${property}:${value}`)\n    .join(';');\n};\n// tworzenie okna z informacją o panstwie\nconst renderList = data => {\n  const markup = data\n    .map(\n      ({ name: { common }, flags }) => `\n        <li id=\"${common}\" style=\"${generateStyleString('li')}\">\n          <img src=\"${\n            flags[0]\n          }\" alt=\"${common} flag\" style=\"${generateStyleString('img')}\">\n          <p style=\"${generateStyleString('p')}\">${common}</p>\n        </li>\n      `\n    )\n    .join('');\n\n  countryList.innerHTML = markup;\n  countryList.style.cssText = generateStyleString('ul');\n  countryInfo.innerHTML = '';\n\n  if (data.length === 1) {\n    const { name, capital, population, languages, flags } = data[0];\n    countryList.innerHTML = '';\n    countryInfo.innerHTML = `\n        <ul style=\"${generateStyleString('ul')}\">\n          <li style=\"${generateStyleString('li')}\">\n            <img src=\"${flags[0]}\" alt=\"${\n      name.common\n    } flag\" style=\"${generateStyleString('img')}\">\n            <h4 style=\"${generateStyleString('h4')}\">${name.common}</h4>\n          </li>\n          <li style=\"${generateStyleString('li')}\">\n            <span style=\"${generateStyleString('span')}\">Capital:</span>\n            <p style=\"${generateStyleString('p')}\">${capital[0] || '-'}</p>\n          </li>\n          <li style=\"${generateStyleString('li')}\">\n            <span style=\"${generateStyleString('span')}\">Population:</span>\n            <p style=\"${generateStyleString('p')}\">${population}</p>\n          </li>\n          <li style=\"${generateStyleString('li')}\">\n            <span style=\"${generateStyleString('span')}\">Languages:</span>\n            <p style=\"${generateStyleString('p')}\">${Object.values(\n      languages\n    ).join(', ')}</p>\n</li>\n</ul>`;\n  }\n};\nsearchInput.addEventListener('input', handleSearch);\n"],"names":["$c584ef0d490f0a58$export$1d1c4391ecac81e8","async","name","url","response","fetch","ok","Promise","reject","Error","status","json","error","console","$1f0dc3b9307be026$var$searchInput","document","getElementById","$1f0dc3b9307be026$var$countryList","querySelector","$1f0dc3b9307be026$var$countryInfo","addEventListener","event","listItem","target","closest","selectedCountry","id","then","data","$1f0dc3b9307be026$var$renderList","$1f0dc3b9307be026$var$handleSearch","debounce","searchTerm","value","trim","length","Notiflix","Notify","info","success","failure","innerHTML","$1f0dc3b9307be026$var$generateStyleString","styleKey","selectedStyles","ul","display","gap","padding","li","cursor","img","width","p","margin","h4","span","Object","entries","map","property","join","markup","common","flags","style","cssText","capital","population","languages","values"],"version":3,"file":"index.22cf66be.js.map"}